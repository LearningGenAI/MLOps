#Tracking data of ML will be done through this dvc(Data Version Contro) file. 
#1st git init has to be initiated to run a DVC (dvc init). dvc file cannot be initiated directly. 

stages: #this is stage 1 - staging 
  load_data: 
    cmd: python src/load_data.py --config=params.yaml
    deps: #this is dependencies
      - src/get_data.py
      - src/load_dat.py
      - source_data/EHR.csv #this is data location

    outs:
      - data/raw/EHR_processed.yaml #this is where the output file will be stored

  Split_data: # this is stage 2, spliting of data.
   cmd: python src/split_data.py --config=params.yaml
   deps:
     - src/split_data.py
     - data/raw/EHR_processed.yaml

    outs:
      - data/processed/train_EHR.csv
      - data/processed/test_EHR.csv
 # now we need pass this train & test data to ML algorithm.

  train_and_evaluate: 
    cmd: python src/train_and_evaluate.py --config=params.yaml #after "src/ " any file name can be given.
    deps: # here we need train, test and train_and_evaluate as dependencies.
     - data/processed/train_EHR.csv
     - data/processed/test_EHR.csv
     - src/train_and_evaluate.py
     # all the above are the common basic stages required to run a ML model.
     # Also we are building this model to generate a report. For that proceed with below steps. 

    params: #update the algorithm name, computing file name "params", & alpha/L1_ration from report section"
      - estimator.Elasticnet.params.alpha
      - estimator.Elasticnet.params.l1_ratio
  #confusion metrics will help us to understand the bias & variance with respect to feature by cross checing.
  #This metrics will confirm if this model good for production or require any modification.
    metrics: 
      - reports/scores.json #copy it from "prams.yaml" file. 
        cache: false 
      - reports/params.json
        cache: false
        

      
  


